    # Iniciando projeto em ReactJS #

Descrição do passo a passo para configuração do ambiente de desenvolvimento React.

    # Instalando bibliotecas React e React-dom e criando pastas iniciais #

- Iniciar package.json utilizando o comando "yarn init -y" ou "npm init -y", isso vai criar o arquivo packet.json

- Adicionar a bibliotecas do react com o comando "yarn add react" e "yarn add react-dom"

- Criar pasta "src", onde ficará todo o código criado para aplicação.

- Criar pasta public onde ficará nossos arquivos publicos como index.html, robots.txt, etc...

    # Instalando e configurando Babel #

- Primeiros comandos de instalação "yarn add @babel/core", "yarn add @babel/cli" e "yarn add @babel/preset-env", 
todos utilizando "-D" ao final, para definir como parametros apenas para desenvolvimento.

- Criar arquivo de configuração do Babel com o nome de "babel.config.js" e nele fazer as seguintes configurações:

    module.exports = {
        presets: [
            '@babel/preset-env'
        ]
    }

    # Utilizando o Babel para converter códigos #    

- Uma das formas de utilizar a conversão do Babel, é utilizando o comando
 "yarn babel 'PASTA DO ARQUIVO/NOME DO ARQUIVO A SER CONVERTIDO' --out-file dist/bundle.js"
 a opção '--out-file' define o local e arquivo que será disponibilizado o código convertido pelo babel
 por convenção usa-se a nomeclatura 'dist' para a pasta e 'bundle' para o arquivo.


    #  Configurando o babel para trabalhar com códigos React #


- Para que o Babel consiga compreender e converter o código React é preciso instalar a extensão 'preset-react'
utlizando o comando 'yarn add @babel/preset-react -D'
- Após a instalação do novo preset, é necessário inclui-lo no arquivo de configuração do Babel criado anteriormente(babel.config.js)
- Agora o código do arquivo ficará assim:

    module.exports = {
    presets: [
        '@babel/preset-env',
        [ '@babel/preset-react', {
           runtime: 'automatic'
       }],
    ]
}
 

    #  Instalando e configurando Webpack  # 

-   Comandos para instalação do Webpack e extensões: yarn add webpack webpack-cli webpack-dev-server -D
- Após concluir a instalação, chegou a hroa de configurar o Webpack, faça isso criando o arquivo 'webpack.config.js'
e coloque o seguinte código:


*// Esses comandos indicam o local e arquivo onde o Webpack vai interagir, a const utlizada juntamente com os códigos
'path.resolve' servem para substituir o uso da / ou \ inserida diretamente no endereço, por conta de diferenças entre SO's
utilizando o path.resolve em conjunto com o '__dirname', o caminho já é adicionado da forma correta independete do sistema utilizado //*  

const path = require('path')

module.exports = {
    entry: path.resolve(__dirname, 'src', 'index.jsx'), // Nome do diretório e arquivo do código inicial
    output: {}
    path: path.resolve(__dirname, 'dist'), // Diretório do código transformado
    filename: 'bundle.js', // arquivo do código transformado
 },


*// A porção do código abaixo, informa ao webpack quais os tipos de arquivo ele deve trabalhar. *//
resolve : {
     extensions: ['.js', '.jsx', '.css']
 },
    *// Código abaixo define regras de como o webpack vai interagir com cada  tipo de arquivo *//
    module: {
        rules: [
            {
              test: /\.jsx$/,
              exclude: /node_modules/,
              use: 'babel-loader' # Babel loader é basicamente a integração entre o babel e o webpack.
              É necessário instalar essa dependencia com o comando 'yarn add babel-loader -D'
            }
        ] 
    }
};


-Para não precisar apontar o caminho fixo da pasta e do arquivo bundle.js dentro do index.html, 
o webpack usa uma ferramenta que pode ser instalada pelo comando 'yarn add html-webpack-plugin -D'

-adicionar ao topo do arquivo:

const HtmlWebpackPlugin = require('html-webpack-plugin')

plugins: [
    new HtmlWebpackPlugin({
        template:path.resolve(__dirname, 'public', 'index.html')
    })
    ],

Para tirar a necessidade de utilizar o comando 'yarn webpack', todas as vezes que precisar atualizar o código com mudanças
podemos usar a ferramenta do webpack que pode ser instalada pelo comando 'yarn webpack-dev-server -D', apartir do momento
que você configura essa ferramenta, ela automaticamente roda o webpack para realizar a conversão do código.

Código abaixo:

 devServer: {
        // contentBase: path.resolve(__dirname, 'public'),
        // contentBase Webpack Version v4
        static: {
            directory: path.resolve(__dirname, 'public'),
        }
    },

O comando que deve ser executado para que essa função funcione é 'yarn webpack serve'

   # Ferramenta para ajudar a visualizar erros #

   Adicionando a linha devtool: 'eval-source-map ' no arquivo webpack.config.js, você conseguirá analisar pelas 
   ferramentas de desenvolvimento dos browsers, o erro de forma mais clara para debbugar.

   # Configurando ambientes de produção e desenvolvimento no webpack #

Deverá ser instalado a ferramenta com o seguinte comando 'yarn add cross-env -D'

   No arquivo webpack realizar as seguintes alterações:

Adicionar variavel isDevelopment

   const isDevelopment = process.env.NODE_ENV !== 'production';

Adicionar diferentes ambientes utilizando a variavel.

module.exports = {
        mode: isDevelopment ? 'development':'production',
        devtool: isDevelopment ? 'eval-source-map':'source-map',


Adicionar ao arquivo package.json a seguinte configuração:

"scripts": {
  "dev": "webpack serve",
  "build": "cros-env NODE_ENV=production webpack"
},


# Configurando suporte para CSS #

Instalar ferramentas pelo comando 'yarn add style-loader css-loader -D'

Adicionar ao webpack a seguinte configuração
        {
            test: /\.css$/,
            exclude: /node_modules/,
            use: ['style-loader', 'css-loader'],
            }


 yarn add @babel/preset-typescript -D // Faz o babel entender o typescript 